// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	client "github.com/gojek/mlp/api/client"
	mock "github.com/stretchr/testify/mock"

	models "github.com/gojek/turing/api/turing/models"

	service "github.com/gojek/turing/api/turing/service"
)

// EnsemblingJobService is an autogenerated mock type for the EnsemblingJobService type
type EnsemblingJobService struct {
	mock.Mock
}

// CreateEnsemblingJob provides a mock function with given fields: job, project, ensembler
func (_m *EnsemblingJobService) CreateEnsemblingJob(job *models.EnsemblingJob, project *client.Project, ensembler *models.PyFuncEnsembler) (*models.EnsemblingJob, error) {
	ret := _m.Called(job, project, ensembler)

	var r0 *models.EnsemblingJob
	if rf, ok := ret.Get(0).(func(*models.EnsemblingJob, *client.Project, *models.PyFuncEnsembler) *models.EnsemblingJob); ok {
		r0 = rf(job, project, ensembler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EnsemblingJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.EnsemblingJob, *client.Project, *models.PyFuncEnsembler) error); ok {
		r1 = rf(job, project, ensembler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ensemblingJob
func (_m *EnsemblingJobService) Delete(ensemblingJob *models.EnsemblingJob) error {
	ret := _m.Called(ensemblingJob)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.EnsemblingJob) error); ok {
		r0 = rf(ensemblingJob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id, options, project
func (_m *EnsemblingJobService) FindByID(id models.ID, options service.EnsemblingJobFindByIDOptions, project *client.Project) (*models.EnsemblingJob, error) {
	ret := _m.Called(id, options, project)

	var r0 *models.EnsemblingJob
	if rf, ok := ret.Get(0).(func(models.ID, service.EnsemblingJobFindByIDOptions, *client.Project) *models.EnsemblingJob); ok {
		r0 = rf(id, options, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EnsemblingJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, service.EnsemblingJobFindByIDOptions, *client.Project) error); ok {
		r1 = rf(id, options, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: options, project
func (_m *EnsemblingJobService) List(options service.EnsemblingJobListOptions, project *client.Project) (*service.PaginatedResults, error) {
	ret := _m.Called(options, project)

	var r0 *service.PaginatedResults
	if rf, ok := ret.Get(0).(func(service.EnsemblingJobListOptions, *client.Project) *service.PaginatedResults); ok {
		r0 = rf(options, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.PaginatedResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(service.EnsemblingJobListOptions, *client.Project) error); ok {
		r1 = rf(options, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkEnsemblingJobForTermination provides a mock function with given fields: ensemblingJob
func (_m *EnsemblingJobService) MarkEnsemblingJobForTermination(ensemblingJob *models.EnsemblingJob) error {
	ret := _m.Called(ensemblingJob)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.EnsemblingJob) error); ok {
		r0 = rf(ensemblingJob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ensemblingJob
func (_m *EnsemblingJobService) Save(ensemblingJob *models.EnsemblingJob) error {
	ret := _m.Called(ensemblingJob)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.EnsemblingJob) error); ok {
		r0 = rf(ensemblingJob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
